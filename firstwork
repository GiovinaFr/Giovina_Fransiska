-- First Assignment
-- Reimplement Haskell function
-- DON'T USE GOOGLE

module One where

import Data.List

-- 1.a

null' x
  | x == [] = True
  | otherwise = False

-- pembatas

fst' (a,b) = a

-- pembatas

snd' (a,b) = b

-- pembatas

and' x
  | x == [True,True] = True
  | otherwise = False

-- pembatas

or' x
  | x == [True,True] = True
  | x == [True,False] = True
  | x == [False, True] = True
  | otherwise = False

-- pembatas

max' a b
  | a>b = a
  | b>a = b
  | otherwise = a

-- pembatas

min' a b
  | a<b = a
  | b<a = b
  | otherwise = a

-- pembatas

head' (x:xs) = x

-- pembatas

tail' (x:xs) = xs

-- pembatas

take' x [] = []
take' 0 (x:xs) = []
take' a (x:xs) = x : take' (a-1) xs

-- pembatas

drop' x [] = []
drop' 0 (x:xs) = (x:xs)
drop' n (a:xs) = drop' (a+1) xs

--pembatas

length' [] = 0
length' (x:xs) = 1 + ( length' xs)

-- pembatas

sum' [] = 0
sum' (x:xs) = x + sum' xs

-- pembatas

elem' a [] = False
elem' a (x:xs)
  | a == x = True
  | a /= x = elem' a (xs)

-- pembatas

notElem' a [] = True
notElem' a (x:xs)
  | a == x = False
  | a /= x = notElem' a (xs)

-- pembatas

delete' a (x:xs)
  | a == x = xs
  | a /= x = x : delete' a(xs)
  | a /= x = (x:xs)
  
-- pembatas


